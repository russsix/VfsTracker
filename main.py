import os
import time
import json
import tls_client
import requests
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

PAGE_URL = "https://visa.vfsglobal.com/blr/ru/pol/login"
LOGIN_URL = "https://lift-api.vfsglobal.com/user/login"

HEADERS = {
    'accept': 'application/json, text/plain, */*',
    'content-type': 'application/x-www-form-urlencoded',
    'origin': 'https://visa.vfsglobal.com',
    'referer': PAGE_URL,
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/133.0.0.0'
}

EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")

TELEGRAM_BOT_TOKEN = "6111909478:AAHw4LngDMHZSxAQ8w_guKvYMFusDE9boU8"
TELEGRAM_CHAT_ID = "-1001702592627"

def escape_markdown(text: str) -> str:
    return re.sub(r'([*_`\[\]()~>#+\-=|{}.!])', r'\\\1', text)

def send_cookies_to_telegram(cookies_dict):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É–∫–∏ –≤ Telegram """
    try:
        for cookie_name, cookie_value in cookies_dict.items():
            escaped_cookie_name = escape_markdown(cookie_name)
            escaped_cookie_value = escape_markdown(cookie_value)
            message = f"**{escaped_cookie_name}:** `{escaped_cookie_value}`"

            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            data = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "Markdown"}
            response = requests.post(url, json=data)

            if response.status_code == 200:
                logging.info(f"‚úÖ –ö—É–∫–∏ '{cookie_name}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram")
            else:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏ '{cookie_name}' –≤ Telegram: {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—É–∫–∏ –≤ Telegram: {str(e)}")

def create_session():
    return tls_client.Session(client_identifier="chrome_120", random_tls_extension_order=True)

def wait_for_cfwaitingroom(session):
    """ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –∫—É–∫–∏ __cfwaitingroom__cf_wr """
    logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è... –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.")

    while True:
        response = session.get(PAGE_URL, headers=HEADERS)
        session_cookies = session.cookies.get_dict()

        logging.info(f"üîç –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏: {json.dumps(session_cookies, indent=4, ensure_ascii=False)}")

        if "__cfwaitingroom__cf_wr" in session_cookies:
            logging.info("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!")
            send_cookies_to_telegram({"__cfwaitingroom__cf_wr": session_cookies["__cfwaitingroom__cf_wr"]})
            return session_cookies  # –í–µ—Ä–Ω—ë–º –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è

        logging.info("‚åõ –ö–æ–º–Ω–∞—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ñ–¥—ë–º –µ—â—ë –º–∏–Ω—É—Ç—É...")
        time.sleep(60)

def fetch_cookies(session):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ª—É—á–∞–µ—Ç –∫—É–∫–∏ """
    try:
        logging.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        response = session.get(PAGE_URL, headers=HEADERS)
        session_cookies = session.cookies.get_dict()

        logging.info(f"üîç –¢–µ–∫—É—â–∏–µ –∫—É–∫–∏: {json.dumps(session_cookies, indent=4, ensure_ascii=False)}")

        if "__cfwaitingroom__cf_wr" not in session_cookies:
            logging.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫—É–∫–∏ __cfwaitingroom__cf_wr. –ñ–¥—ë–º, –ø–æ–∫–∞ –ø—Ä–æ–π–¥–µ—Ç –∫–æ–º–Ω–∞—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è.")
            session_cookies = wait_for_cfwaitingroom(session)  # –û–∂–∏–¥–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã Cloudflare —Ç–æ—á–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª
        time.sleep(15)

        send_cookies_to_telegram(session_cookies)

        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        return False

def login(session):
    """ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è """
    payload = {
        'username': EMAIL,
        'password': PASSWORD
    }

    try:
        response = session.post(LOGIN_URL, json=payload, headers=HEADERS)
        if response.status_code == 200:
            auth_data = response.json()
            logging.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
            send_cookies_to_telegram({"auth_data": json.dumps(auth_data, indent=4, ensure_ascii=False)})
        elif response.status_code == 403:
            logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ 403. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {str(e)}")

def start_periodic_update():
    """ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã """
    session = create_session()

    while True:
        if not fetch_cookies(session):
            logging.warning("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é...")
            session = create_session()

        login(session)

        logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 25 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º...")
        time.sleep(1500)

if __name__ == "__main__":
    start_periodic_update()